#include <Wire.h>
#include <ArduCAM.h>
#include <SPI.h>
#include "memorysaver.h"
#include <ArduinoBLE.h>
#include <JPEGDecoder.h>
#include <string.h> // 包含memset函数

#if !(defined (OV5640_MINI_5MP_PLUS) || defined (OV5642_MINI_5MP_PLUS))
#error Please select the hardware platform and camera module in the ../libraries/ArduCAM/memorysaver.h file
#endif

#define FRAME_NUMBER 2
#define MAX_JPEG_SIZE 240*320

uint8_t jpgFile[MAX_JPEG_SIZE];  // 存储JPEG数据的数组
uint16_t jpgFileSize = 0;        

BLEService myService("180A"); 
BLEByteCharacteristic myCharacteristic("2A57", BLERead | BLEWrite); 

const int CS = 10;
static uint8_t resolution = 0;
ArduCAM myCAM(OV5642, CS);

void setup() 
{
    delay(10000);
    uint8_t vid, pid;
    uint8_t temp;
    Wire.begin();
    Serial.begin(921600);
    Serial.println(F("ACK CMD ArduCAM Start!"));
    pinMode(CS, OUTPUT);
    digitalWrite(CS, HIGH);

    SPI.begin();
    myCAM.write_reg(0x07, 0x80);
    delay(100);
    myCAM.write_reg(0x07, 0x00);
    delay(100);

    while (1) 
    {
        myCAM.write_reg(ARDUCHIP_TEST1, 0x55);
        temp = myCAM.read_reg(ARDUCHIP_TEST1);
        if (temp != 0x55) {
            Serial.println(F("ACK CMD SPI interface Error!"));
            delay(1000);
            continue;
        } else {
            Serial.println(F("ACK CMD SPI interface OK."));
            break;
        }
    }

    while (1) 
    {
        myCAM.rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid);
        myCAM.rdSensorReg16_8(OV5642_CHIPID_LOW, &pid);
        if ((vid != 0x56) || (pid != 0x42)) {
            Serial.println(F("ACK CMD Can't find OV5642 module!"));
            delay(1000);
            continue;
        } else {
            Serial.println(F("ACK CMD OV5642 detected."));
            break;
        }
    }

    myCAM.set_format(JPEG);
    myCAM.InitCAM();
    myCAM.write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);
    myCAM.clear_fifo_flag();
    myCAM.write_reg(ARDUCHIP_FRAMES, 0x00);
    myCAM.set_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
    delay(800);

    if (!BLE.begin()) 
    {
        Serial.println("Fail to start BLE...");
        while (1);
    }

    Serial.println("BLE starts");

    BLE.setLocalName("Nano33BLE");
    BLE.setAdvertisedService(myService);
    myService.addCharacteristic(myCharacteristic);
    BLE.addService(myService);

    BLE.advertise();

    Serial.println("Waiting for connection...");
}

void loop() 
{
    BLEDevice central = BLE.central();
    if (central) 
    {
        Serial.print("Nano 33 and phone connected: ");
        Serial.println(central.address());
        uint8_t temp = 0xff, temp_last = 0;
        uint8_t start_capture = 0;
        uint8_t IMGcounter = 1;
        while (central.connected()) 
        {
            if (myCharacteristic.written()) 
            {
                temp = myCharacteristic.value();
                
                Serial.print("Data from phone: ");
                Serial.println(temp);
                if (temp != 0xff) 
                {
                    Serial.println(temp, DEC);
                    Serial.println("===========");
                }
                switch (temp) 
                {
                    case 0:
                        temp = 0xff;
                        myCAM.clear_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
                        myCAM.OV5642_set_JPEG_size(OV5642_320x240);
                        Serial.println(F("ACK CMD switch to OV5642_320x240"));
                        delay(1000);
                        myCAM.set_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
                        start_capture = 1;
                        Serial.println(F("ACK CMD CAM start single shot."));
                        myCAM.clear_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
                        delay(800);
                        break;

                    default:
                        break;
                }
                Serial.println("Start capturing..");
                for (IMGcounter; IMGcounter < FRAME_NUMBER; IMGcounter = IMGcounter + 1)
                {
                    frameCapture(temp, start_capture, IMGcounter);
                    temp = 0x00;
                    start_capture = 1;
                    myCAM.flush_fifo();
                    delay(800);
                }
                
            }
        }
        Serial.print("Disconnected: ");
        Serial.println(central.address());
    }
}

uint8_t frameCapture(uint8_t temp, uint8_t start_capture, uint8_t counter)
{
    uint8_t temp_last;
    if (start_capture == 1) 
    {
        myCAM.clear_fifo_flag();
        myCAM.start_capture();
        start_capture = 0;

        unsigned long start_time = millis();
        while (!myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK)) 
        {
            if (millis() - start_time > 5000) 
            {
                Serial.println(F("Capture timeout."));
                break;
            }
        }

        if (myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK)) 
        {
            Serial.print("IMG No. ");
            Serial.print(counter);
            temp = 0;
            Serial.println(F(" INFO:"));
            
            jpgFileSize = 0; // 重置图片大小计数器
            while ((temp != 0xD9) | (temp_last != 0xFF) && jpgFileSize < MAX_JPEG_SIZE) 
            {
                temp_last = temp; 
                temp = myCAM.read_fifo(); 
                jpgFile[jpgFileSize] = temp;
                jpgFileSize = jpgFileSize + 1;
            }
            myCAM.clear_fifo_flag();
            Serial.println(jpgFileSize);
            // 打印JPEG数据（仅用于调试）
            for (uint16_t i = 0; i < jpgFileSize; i++) {
                if (jpgFile[i] < 0x10) {
                    Serial.print(F("0"));
                }
                Serial.print(jpgFile[i], HEX);
            }
            Serial.println(F(" "));
            Serial.println(F("End IMG INFO"));

            // 裁剪ROI并打印RGB信息
            uint16_t roiX = 50, roiY = 50, roiWidth = 20, roiHeight = 20;
            DecodeAndProcessImage(80, 64, jpgFile, jpgFileSize);
            Serial.println("End cropping");
        } 
        else 
        {
            Serial.println(F("Capture not done."));
        }
    }
    
    return 0;
}

void DecodeAndProcessImage(int image_width, int image_height, uint8_t* jpeg_buffer, uint16_t jpeg_length) {

  // Coded Units (MCUs), which are 16x8 blocks of pixels.
  JpegDec.decodeArray(jpeg_buffer, jpeg_length);
  jpegInfo();

  // Number of MCUs in cropped IMG
  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
  Serial.print("Number of MCUs (Width) in cropped IMG is: ");
  Serial.println(keep_x_mcus);
  Serial.print("Number of MCUs (Height) in cropped IMG is: ");
  Serial.println(keep_y_mcus);

  // Calculate how many MCUs we will throw away on the x axis
  // Amount = #MCUs in ori IMG - #MCUs in cropped IMG
  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;

  // Roughly center the crop by skipping half the throwaway MCUs at the
  // beginning of each row
  const int skip_start_x_mcus = skip_x_mcus / 2;
  // Index where we will start throwing away MCUs after the data
  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;

  // Same approach for the columns
  const int skip_y_mcus = JpegDec.MCUSPerCol - keep_y_mcus;
  const int skip_start_y_mcus = skip_y_mcus / 2;
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;

  Serial.print("skip_x_mcus is: ");
  Serial.println(skip_x_mcus);
  Serial.print("skip_y_mcus is: ");
  Serial.println(skip_y_mcus);

  // Pointer to the current pixel
  uint16_t* pImg;
  // Color of the current pixel
  uint16_t color;
  uint16_t MCUCount = 0;
  uint16_t pixelCounter = JpegDec.MCUWidth * JpegDec.MCUHeight * keep_x_mcus * keep_y_mcus;
  if (pixelCounter > 65536)
  {
    Serial.println("ERROR: TOO MANY PIXELS");
  }
  uint8_t rArray[pixelCounter];
  uint8_t gArray[pixelCounter];
  uint8_t bArray[pixelCounter];
  uint8_t grayArray[pixelCounter];
  uint16_t colorArray[pixelCounter];
  // Loop over the MCUs
  while (JpegDec.read()) 
  {
    MCUCount++;
    // Skip over the initial set of rows
    if (JpegDec.MCUy < skip_start_y_mcus) 
    {
      continue;
    }
    // Skip if we're on a column that we don't want
    if (JpegDec.MCUx < skip_start_x_mcus ||
    JpegDec.MCUx >= skip_end_x_mcu_index) 
    {
      continue;
    }
    // Skip if we've got all the rows we want
    if (JpegDec.MCUy >= skip_end_y_mcu_index) 
    {
      continue;
    }
    // Pointer to the current pixel
    pImg = JpegDec.pImage;

    // The x and y indexes of the current MCU, ignoring the MCUs we skip
    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;

    // The coordinates of the top left of this MCU when applied to the output
    // image
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
    uint16_t index = 0;
    // Loop through the MCU's rows and columns
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) 
    {
      // The y coordinate of this pixel in the output index
      int current_y = y_origin + mcu_row;
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) 
      {
        color = *pImg++;
        // Extract the color values (5 red bits, 6 green, 5 blue)
        uint8_t r, g, b;
        r = ((color & 0xF800) >> 11) * 8;
        g = ((color & 0x07E0) >> 5) * 4;
        b = ((color & 0x001F) >> 0) * 8;
        // Convert to grayscale by calculating luminance
        // See Grayscale - Wikipedia for magic numbers
        float gray_value = (0.2126 * r) + (0.7152 * g) + (0.0722 * b);

        // The x coordinate of this pixel in the output image
        int current_x = x_origin + mcu_col;
        // The index of this pixel in our flat output buffer
        int index = (current_y * image_width) + current_x;
        grayArray[index] = static_cast<uint8_t>(gray_value);
        // pixelCounter = index;
        // colorArray[index] = color;
        rArray[index] = r;
        gArray[index] = g;
        bArray[index] = b;
        index++;
      }
    }
    
  }
  // Serial.println(index);
  
  Serial.println(pixelCounter);
  Serial.println("grayArray");
  for (uint16_t i = 0; i < pixelCounter; i++)
  {
    Serial.print(grayArray[i]);
    Serial.print(" ");
  }
  Serial.println("");
  Serial.println("R");
  for (uint16_t i = 0; i < pixelCounter; i++)
  {
    Serial.print(rArray[i]);
    Serial.print(" ");
  }
  Serial.println("");
  Serial.println("G");
  for (uint16_t i = 0; i < pixelCounter; i++)
  {
    Serial.print(gArray[i]);
    Serial.print(" ");
  }
  Serial.println("");
  Serial.println("B");
  for (uint16_t i = 0; i < pixelCounter; i++)
  {
    Serial.print(bArray[i]);
    Serial.print(" ");
  }
  Serial.println("");
  Serial.print("Number of MCUs");
  Serial.println(MCUCount);
}
void jpegInfo() {
  Serial.println(F("==============="));
  Serial.println(F("JPEG image info"));
  Serial.println(F("==============="));
  Serial.print(F(  "Width      :")); Serial.println(JpegDec.width);
  Serial.print(F(  "Height     :")); Serial.println(JpegDec.height);
  Serial.print(F(  "Components :")); Serial.println(JpegDec.comps);
  Serial.print(F(  "MCU / row for Ori IMG: ")); Serial.println(JpegDec.MCUSPerRow);
  Serial.print(F(  "MCU / col for Ori IMG: ")); Serial.println(JpegDec.MCUSPerCol);
  Serial.print(F(  "Scan type  :")); Serial.println(JpegDec.scanType);
  Serial.print(F(  "MCU width  :")); Serial.println(JpegDec.MCUWidth);
  Serial.print(F(  "MCU height :")); Serial.println(JpegDec.MCUHeight);
  Serial.println(F("==============="));
}
