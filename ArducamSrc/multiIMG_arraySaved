#include <Wire.h>
#include <ArduCAM.h>
#include <SPI.h>
#include "memorysaver.h"
#include <ArduinoBLE.h>
#include <JPEGDecoder.h>
#include <string.h> // 包含memset函数

#if !(defined (OV5640_MINI_5MP_PLUS) || defined (OV5642_MINI_5MP_PLUS))
#error Please select the hardware platform and camera module in the ../libraries/ArduCAM/memorysaver.h file
#endif

#define FRAME_NUMBER 11
#define MAX_JPEG_SIZE 240*320

uint8_t jpgFile[MAX_JPEG_SIZE];  // 存储JPEG数据的数组
uint16_t jpgFileSize = 0;        

BLEService myService("180A"); 
BLEByteCharacteristic myCharacteristic("2A57", BLERead | BLEWrite); 

const int CS = 10;
static uint8_t resolution = 0;
ArduCAM myCAM(OV5642, CS);

void setup() 
{
    delay(10000);
    uint8_t vid, pid;
    uint8_t temp;
    Wire.begin();
    Serial.begin(921600);
    Serial.println(F("ACK CMD ArduCAM Start!"));
    pinMode(CS, OUTPUT);
    digitalWrite(CS, HIGH);

    SPI.begin();
    myCAM.write_reg(0x07, 0x80);
    delay(100);
    myCAM.write_reg(0x07, 0x00);
    delay(100);

    while (1) 
    {
        myCAM.write_reg(ARDUCHIP_TEST1, 0x55);
        temp = myCAM.read_reg(ARDUCHIP_TEST1);
        if (temp != 0x55) {
            Serial.println(F("ACK CMD SPI interface Error!"));
            delay(1000);
            continue;
        } else {
            Serial.println(F("ACK CMD SPI interface OK."));
            break;
        }
    }

    while (1) 
    {
        myCAM.rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid);
        myCAM.rdSensorReg16_8(OV5642_CHIPID_LOW, &pid);
        if ((vid != 0x56) || (pid != 0x42)) {
            Serial.println(F("ACK CMD Can't find OV5642 module!"));
            delay(1000);
            continue;
        } else {
            Serial.println(F("ACK CMD OV5642 detected."));
            break;
        }
    }

    myCAM.set_format(JPEG);
    myCAM.InitCAM();
    myCAM.write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);
    myCAM.clear_fifo_flag();
    myCAM.write_reg(ARDUCHIP_FRAMES, 0x00);
    myCAM.set_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
    delay(800);

    if (!BLE.begin()) 
    {
        Serial.println("Fail to start BLE...");
        while (1);
    }

    Serial.println("BLE starts");

    BLE.setLocalName("Nano33BLE");
    BLE.setAdvertisedService(myService);
    myService.addCharacteristic(myCharacteristic);
    BLE.addService(myService);

    BLE.advertise();

    Serial.println("Waiting for connection...");
}

void loop() 
{
    BLEDevice central = BLE.central();
    if (central) 
    {
        Serial.print("Nano 33 and phone connected: ");
        Serial.println(central.address());
        uint8_t temp = 0xff, temp_last = 0;
        uint8_t start_capture = 0;
        uint8_t IMGcounter = 1;
        while (central.connected()) 
        {
            if (myCharacteristic.written()) 
            {
                temp = myCharacteristic.value();
                
                Serial.print("Data from phone: ");
                Serial.println(temp);
                if (temp != 0xff) 
                {
                    Serial.println(temp, DEC);
                    Serial.println("===========");
                }
                switch (temp) 
                {
                    case 0:
                        temp = 0xff;
                        myCAM.clear_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
                        myCAM.OV5642_set_JPEG_size(OV5642_320x240);
                        Serial.println(F("ACK CMD switch to OV5642_320x240"));
                        delay(1000);
                        myCAM.set_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
                        start_capture = 1;
                        Serial.println(F("ACK CMD CAM start single shot."));
                        myCAM.clear_bit(ARDUCHIP_GPIO, GPIO_PWDN_MASK);
                        delay(800);
                        break;

                    default:
                        break;
                }
                Serial.println("Start capturing..");
                for (IMGcounter; IMGcounter < FRAME_NUMBER; IMGcounter = IMGcounter + 1)
                {
                    frameCapture(temp, start_capture, IMGcounter);
                    temp = 0x00;
                    start_capture = 1;
                    myCAM.flush_fifo();
                    delay(800);
                }
                
            }
        }
        Serial.print("Disconnected: ");
        Serial.println(central.address());
    }
}

uint8_t frameCapture(uint8_t temp, uint8_t start_capture, uint8_t counter)
{
    uint8_t temp_last;
    if (start_capture == 1) 
    {
        myCAM.clear_fifo_flag();
        myCAM.start_capture();
        start_capture = 0;

        unsigned long start_time = millis();
        while (!myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK)) 
        {
            if (millis() - start_time > 5000) 
            {
                Serial.println(F("Capture timeout."));
                break;
            }
        }

        if (myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK)) 
        {
            Serial.print("IMG No. ");
            Serial.print(counter);
            temp = 0;
            Serial.println(F(" INFO:"));
            
            jpgFileSize = 0; // 重置图片大小计数器
            while ((temp != 0xD9) | (temp_last != 0xFF) && jpgFileSize < MAX_JPEG_SIZE) 
            {
                temp_last = temp; 
                temp = myCAM.read_fifo(); 
                jpgFile[jpgFileSize] = temp;
                jpgFileSize = jpgFileSize + 1;
            }
            myCAM.clear_fifo_flag();
            Serial.println(jpgFileSize);
            // 打印JPEG数据（仅用于调试）
            for (uint16_t i = 0; i < jpgFileSize; i++) {
                if (jpgFile[i] < 0x10) {
                    Serial.print(F("0"));
                }
                Serial.print(jpgFile[i], HEX);
            }
            Serial.println(F(" "));
            Serial.println(F("End IMG INFO"));

        } 
        else 
        {
            Serial.println(F("Capture not done."));
        }
    }
    
    return 0;
}
